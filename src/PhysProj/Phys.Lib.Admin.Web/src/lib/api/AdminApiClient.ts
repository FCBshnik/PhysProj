//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class AdminApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param search (optional) 
     * @return OK
     */
    listAuthors(search: string | undefined): Promise<AuthorModel[]> {
        let url_ = this.baseUrl + "/api/authors?";
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "search=" + encodeURIComponent("" + search) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processListAuthors(_response));
        });
    }

    protected processListAuthors(response: Response): Promise<AuthorModel[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AuthorModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AuthorModel[]>(null as any);
    }

    /**
     * @return OK
     */
    createAuthor(body: AuthorCreateModel): Promise<AuthorModel> {
        let url_ = this.baseUrl + "/api/authors";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processCreateAuthor(_response));
        });
    }

    protected processCreateAuthor(response: Response): Promise<AuthorModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthorModel.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorModel.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AuthorModel>(null as any);
    }

    /**
     * @return OK
     */
    getAuthor(code: string): Promise<AuthorModel> {
        let url_ = this.baseUrl + "/api/authors/{code}";
        if (code === undefined || code === null)
            throw new Error("The parameter 'code' must be defined.");
        url_ = url_.replace("{code}", encodeURIComponent("" + code));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetAuthor(_response));
        });
    }

    protected processGetAuthor(response: Response): Promise<AuthorModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthorModel.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorModel.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AuthorModel>(null as any);
    }

    /**
     * @return OK
     */
    deleteAuthor(code: string): Promise<OkModel> {
        let url_ = this.baseUrl + "/api/authors/{code}";
        if (code === undefined || code === null)
            throw new Error("The parameter 'code' must be defined.");
        url_ = url_.replace("{code}", encodeURIComponent("" + code));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processDeleteAuthor(_response));
        });
    }

    protected processDeleteAuthor(response: Response): Promise<OkModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OkModel.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorModel.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OkModel>(null as any);
    }

    /**
     * @return OK
     */
    updateAuthorLifetime(code: string, body: AuthorLifetimeUpdateModel): Promise<AuthorModel> {
        let url_ = this.baseUrl + "/api/authors/{code}/lifetime";
        if (code === undefined || code === null)
            throw new Error("The parameter 'code' must be defined.");
        url_ = url_.replace("{code}", encodeURIComponent("" + code));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processUpdateAuthorLifetime(_response));
        });
    }

    protected processUpdateAuthorLifetime(response: Response): Promise<AuthorModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthorModel.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorModel.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AuthorModel>(null as any);
    }

    /**
     * @return OK
     */
    updateAuthorInfo(code: string, language: string, body: AuthorInfoUpdateModel): Promise<AuthorModel> {
        let url_ = this.baseUrl + "/api/authors/{code}/info/{language}";
        if (code === undefined || code === null)
            throw new Error("The parameter 'code' must be defined.");
        url_ = url_.replace("{code}", encodeURIComponent("" + code));
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processUpdateAuthorInfo(_response));
        });
    }

    protected processUpdateAuthorInfo(response: Response): Promise<AuthorModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthorModel.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorModel.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AuthorModel>(null as any);
    }

    /**
     * @return OK
     */
    deleteAuthorInfo(code: string, language: string): Promise<AuthorModel> {
        let url_ = this.baseUrl + "/api/authors/{code}/info/{language}";
        if (code === undefined || code === null)
            throw new Error("The parameter 'code' must be defined.");
        url_ = url_.replace("{code}", encodeURIComponent("" + code));
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processDeleteAuthorInfo(_response));
        });
    }

    protected processDeleteAuthorInfo(response: Response): Promise<AuthorModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthorModel.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorModel.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AuthorModel>(null as any);
    }

    /**
     * @return OK
     */
    listLanguages(): Promise<LanguageModel[]> {
        let url_ = this.baseUrl + "/api/config/langs";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processListLanguages(_response));
        });
    }

    protected processListLanguages(response: Response): Promise<LanguageModel[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(LanguageModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorModel.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LanguageModel[]>(null as any);
    }

    /**
     * @param search (optional) 
     * @return OK
     */
    listFiles(search: string | undefined): Promise<FileModel[]> {
        let url_ = this.baseUrl + "/api/files?";
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "search=" + encodeURIComponent("" + search) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processListFiles(_response));
        });
    }

    protected processListFiles(response: Response): Promise<FileModel[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(FileModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorModel.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileModel[]>(null as any);
    }

    /**
     * @return OK
     */
    deleteFile(code: string): Promise<OkModel> {
        let url_ = this.baseUrl + "/api/files/{code}";
        if (code === undefined || code === null)
            throw new Error("The parameter 'code' must be defined.");
        url_ = url_.replace("{code}", encodeURIComponent("" + code));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processDeleteFile(_response));
        });
    }

    protected processDeleteFile(response: Response): Promise<OkModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OkModel.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorModel.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OkModel>(null as any);
    }

    /**
     * @return OK
     */
    listStorages(): Promise<FileStorageModel[]> {
        let url_ = this.baseUrl + "/api/files/storages";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processListStorages(_response));
        });
    }

    protected processListStorages(response: Response): Promise<FileStorageModel[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(FileStorageModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorModel.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileStorageModel[]>(null as any);
    }

    /**
     * @param search (optional) 
     * @return OK
     */
    listStorageFiles(storageCode: string, search: string | undefined): Promise<FileStorageFileModel[]> {
        let url_ = this.baseUrl + "/api/files/storages/{storageCode}/files?";
        if (storageCode === undefined || storageCode === null)
            throw new Error("The parameter 'storageCode' must be defined.");
        url_ = url_.replace("{storageCode}", encodeURIComponent("" + storageCode));
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "search=" + encodeURIComponent("" + search) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processListStorageFiles(_response));
        });
    }

    protected processListStorageFiles(response: Response): Promise<FileStorageFileModel[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(FileStorageFileModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorModel.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileStorageFileModel[]>(null as any);
    }

    /**
     * @return OK
     */
    linkStorageFile(storageCode: string, body: FileStorageLinkModel): Promise<FileModel> {
        let url_ = this.baseUrl + "/api/files/storages/{storageCode}/files/link";
        if (storageCode === undefined || storageCode === null)
            throw new Error("The parameter 'storageCode' must be defined.");
        url_ = url_.replace("{storageCode}", encodeURIComponent("" + storageCode));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processLinkStorageFile(_response));
        });
    }

    protected processLinkStorageFile(response: Response): Promise<FileModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FileModel.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorModel.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileModel>(null as any);
    }

    /**
     * @return OK
     */
    refreshStorage(storageCode: string): Promise<OkModel> {
        let url_ = this.baseUrl + "/api/files/storages/{storageCode}/refresh";
        if (storageCode === undefined || storageCode === null)
            throw new Error("The parameter 'storageCode' must be defined.");
        url_ = url_.replace("{storageCode}", encodeURIComponent("" + storageCode));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processRefreshStorage(_response));
        });
    }

    protected processRefreshStorage(response: Response): Promise<OkModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OkModel.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorModel.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OkModel>(null as any);
    }

    /**
     * @return OK
     */
    healthCheck(): Promise<OkModel> {
        let url_ = this.baseUrl + "/api/health/check";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processHealthCheck(_response));
        });
    }

    protected processHealthCheck(response: Response): Promise<OkModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OkModel.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorModel.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OkModel>(null as any);
    }

    /**
     * @return OK
     */
    listMigrators(): Promise<MigratorModel[]> {
        let url_ = this.baseUrl + "/api/migrations/migrators";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processListMigrators(_response));
        });
    }

    protected processListMigrators(response: Response): Promise<MigratorModel[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MigratorModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorModel.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MigratorModel[]>(null as any);
    }

    /**
     * @return OK
     */
    startMigration(body: MigrationTaskModel): Promise<MigrationModel> {
        let url_ = this.baseUrl + "/api/migrations";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processStartMigration(_response));
        });
    }

    protected processStartMigration(response: Response): Promise<MigrationModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MigrationModel.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorModel.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MigrationModel>(null as any);
    }

    /**
     * @return OK
     */
    listMigrations(): Promise<MigrationModel[]> {
        let url_ = this.baseUrl + "/api/migrations";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processListMigrations(_response));
        });
    }

    protected processListMigrations(response: Response): Promise<MigrationModel[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MigrationModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorModel.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MigrationModel[]>(null as any);
    }

    /**
     * @return OK
     */
    getMigration(id: string): Promise<MigrationModel> {
        let url_ = this.baseUrl + "/api/migrations/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetMigration(_response));
        });
    }

    protected processGetMigration(response: Response): Promise<MigrationModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MigrationModel.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorModel.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MigrationModel>(null as any);
    }

    /**
     * @return OK
     */
    listSettings(): Promise<string[]> {
        let url_ = this.baseUrl + "/api/settings";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processListSettings(_response));
        });
    }

    protected processListSettings(response: Response): Promise<string[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorModel.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string[]>(null as any);
    }

    /**
     * @return OK
     */
    getSettings(code: string): Promise<any> {
        let url_ = this.baseUrl + "/api/settings/{code}";
        if (code === undefined || code === null)
            throw new Error("The parameter 'code' must be defined.");
        url_ = url_.replace("{code}", encodeURIComponent("" + code));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetSettings(_response));
        });
    }

    protected processGetSettings(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorModel.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(null as any);
    }

    /**
     * @return OK
     */
    updateSettings(code: string, body: JsonValue): Promise<any> {
        let url_ = this.baseUrl + "/api/settings/{code}";
        if (code === undefined || code === null)
            throw new Error("The parameter 'code' must be defined.");
        url_ = url_.replace("{code}", encodeURIComponent("" + code));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processUpdateSettings(_response));
        });
    }

    protected processUpdateSettings(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorModel.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(null as any);
    }

    /**
     * @return OK
     */
    login(body: LoginModel): Promise<LoginSuccessModel> {
        let url_ = this.baseUrl + "/api/user/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processLogin(_response));
        });
    }

    protected processLogin(response: Response): Promise<LoginSuccessModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LoginSuccessModel.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorModel.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LoginSuccessModel>(null as any);
    }

    /**
     * @return OK
     */
    getUserInfo(): Promise<UserModel> {
        let url_ = this.baseUrl + "/api/user";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetUserInfo(_response));
        });
    }

    protected processGetUserInfo(response: Response): Promise<UserModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserModel>(null as any);
    }

    /**
     * @param search (optional) 
     * @return OK
     */
    listWorks(search: string | undefined): Promise<WorkModel[]> {
        let url_ = this.baseUrl + "/api/works?";
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "search=" + encodeURIComponent("" + search) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processListWorks(_response));
        });
    }

    protected processListWorks(response: Response): Promise<WorkModel[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WorkModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorModel.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WorkModel[]>(null as any);
    }

    /**
     * @return OK
     */
    createWork(body: WorkCreateModel): Promise<WorkModel> {
        let url_ = this.baseUrl + "/api/works";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processCreateWork(_response));
        });
    }

    protected processCreateWork(response: Response): Promise<WorkModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WorkModel.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorModel.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WorkModel>(null as any);
    }

    /**
     * @return OK
     */
    getWork(code: string): Promise<WorkModel> {
        let url_ = this.baseUrl + "/api/works/{code}";
        if (code === undefined || code === null)
            throw new Error("The parameter 'code' must be defined.");
        url_ = url_.replace("{code}", encodeURIComponent("" + code));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetWork(_response));
        });
    }

    protected processGetWork(response: Response): Promise<WorkModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WorkModel.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorModel.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WorkModel>(null as any);
    }

    /**
     * @return OK
     */
    updateWork(code: string, body: WorkUpdateModel): Promise<WorkModel> {
        let url_ = this.baseUrl + "/api/works/{code}";
        if (code === undefined || code === null)
            throw new Error("The parameter 'code' must be defined.");
        url_ = url_.replace("{code}", encodeURIComponent("" + code));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processUpdateWork(_response));
        });
    }

    protected processUpdateWork(response: Response): Promise<WorkModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WorkModel.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorModel.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WorkModel>(null as any);
    }

    /**
     * @return OK
     */
    deleteWork(code: string): Promise<OkModel> {
        let url_ = this.baseUrl + "/api/works/{code}";
        if (code === undefined || code === null)
            throw new Error("The parameter 'code' must be defined.");
        url_ = url_.replace("{code}", encodeURIComponent("" + code));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processDeleteWork(_response));
        });
    }

    protected processDeleteWork(response: Response): Promise<OkModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OkModel.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorModel.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OkModel>(null as any);
    }

    /**
     * @return OK
     */
    updateWorkInfo(code: string, language: string, body: WorkInfoUpdateModel): Promise<WorkModel> {
        let url_ = this.baseUrl + "/api/works/{code}/info/{language}";
        if (code === undefined || code === null)
            throw new Error("The parameter 'code' must be defined.");
        url_ = url_.replace("{code}", encodeURIComponent("" + code));
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processUpdateWorkInfo(_response));
        });
    }

    protected processUpdateWorkInfo(response: Response): Promise<WorkModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WorkModel.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorModel.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WorkModel>(null as any);
    }

    /**
     * @return OK
     */
    deleteWorkInfo(code: string, language: string): Promise<WorkModel> {
        let url_ = this.baseUrl + "/api/works/{code}/info/{language}";
        if (code === undefined || code === null)
            throw new Error("The parameter 'code' must be defined.");
        url_ = url_.replace("{code}", encodeURIComponent("" + code));
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processDeleteWorkInfo(_response));
        });
    }

    protected processDeleteWorkInfo(response: Response): Promise<WorkModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WorkModel.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorModel.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WorkModel>(null as any);
    }

    /**
     * @return OK
     */
    linkAuthorToWork(code: string, authorCode: string): Promise<WorkModel> {
        let url_ = this.baseUrl + "/api/works/{code}/authors/{authorCode}";
        if (code === undefined || code === null)
            throw new Error("The parameter 'code' must be defined.");
        url_ = url_.replace("{code}", encodeURIComponent("" + code));
        if (authorCode === undefined || authorCode === null)
            throw new Error("The parameter 'authorCode' must be defined.");
        url_ = url_.replace("{authorCode}", encodeURIComponent("" + authorCode));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processLinkAuthorToWork(_response));
        });
    }

    protected processLinkAuthorToWork(response: Response): Promise<WorkModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WorkModel.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorModel.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WorkModel>(null as any);
    }

    /**
     * @return OK
     */
    unlinkAuthorFromWork(code: string, authorCode: string): Promise<WorkModel> {
        let url_ = this.baseUrl + "/api/works/{code}/authors/{authorCode}";
        if (code === undefined || code === null)
            throw new Error("The parameter 'code' must be defined.");
        url_ = url_.replace("{code}", encodeURIComponent("" + code));
        if (authorCode === undefined || authorCode === null)
            throw new Error("The parameter 'authorCode' must be defined.");
        url_ = url_.replace("{authorCode}", encodeURIComponent("" + authorCode));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processUnlinkAuthorFromWork(_response));
        });
    }

    protected processUnlinkAuthorFromWork(response: Response): Promise<WorkModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WorkModel.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorModel.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WorkModel>(null as any);
    }

    /**
     * @return OK
     */
    linkOriginalToWork(code: string, originalCode: string): Promise<WorkModel> {
        let url_ = this.baseUrl + "/api/works/{code}/original/{originalCode}";
        if (code === undefined || code === null)
            throw new Error("The parameter 'code' must be defined.");
        url_ = url_.replace("{code}", encodeURIComponent("" + code));
        if (originalCode === undefined || originalCode === null)
            throw new Error("The parameter 'originalCode' must be defined.");
        url_ = url_.replace("{originalCode}", encodeURIComponent("" + originalCode));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processLinkOriginalToWork(_response));
        });
    }

    protected processLinkOriginalToWork(response: Response): Promise<WorkModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WorkModel.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorModel.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WorkModel>(null as any);
    }

    /**
     * @return OK
     */
    unlinkOriginalFromWork(code: string): Promise<WorkModel> {
        let url_ = this.baseUrl + "/api/works/{code}/original";
        if (code === undefined || code === null)
            throw new Error("The parameter 'code' must be defined.");
        url_ = url_.replace("{code}", encodeURIComponent("" + code));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processUnlinkOriginalFromWork(_response));
        });
    }

    protected processUnlinkOriginalFromWork(response: Response): Promise<WorkModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WorkModel.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorModel.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WorkModel>(null as any);
    }

    /**
     * @return OK
     */
    linkWorkToCollectedWork(collectedWorkCode: string, linkWorkCode: string): Promise<WorkModel> {
        let url_ = this.baseUrl + "/api/works/{collectedWorkCode}/works/{linkWorkCode}";
        if (collectedWorkCode === undefined || collectedWorkCode === null)
            throw new Error("The parameter 'collectedWorkCode' must be defined.");
        url_ = url_.replace("{collectedWorkCode}", encodeURIComponent("" + collectedWorkCode));
        if (linkWorkCode === undefined || linkWorkCode === null)
            throw new Error("The parameter 'linkWorkCode' must be defined.");
        url_ = url_.replace("{linkWorkCode}", encodeURIComponent("" + linkWorkCode));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processLinkWorkToCollectedWork(_response));
        });
    }

    protected processLinkWorkToCollectedWork(response: Response): Promise<WorkModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WorkModel.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorModel.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WorkModel>(null as any);
    }

    /**
     * @return OK
     */
    unlinkWorkFromCollectedWork(collectedWorkCode: string, linkWorkCode: string): Promise<WorkModel> {
        let url_ = this.baseUrl + "/api/works/{collectedWorkCode}/works/{linkWorkCode}";
        if (collectedWorkCode === undefined || collectedWorkCode === null)
            throw new Error("The parameter 'collectedWorkCode' must be defined.");
        url_ = url_.replace("{collectedWorkCode}", encodeURIComponent("" + collectedWorkCode));
        if (linkWorkCode === undefined || linkWorkCode === null)
            throw new Error("The parameter 'linkWorkCode' must be defined.");
        url_ = url_.replace("{linkWorkCode}", encodeURIComponent("" + linkWorkCode));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processUnlinkWorkFromCollectedWork(_response));
        });
    }

    protected processUnlinkWorkFromCollectedWork(response: Response): Promise<WorkModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WorkModel.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorModel.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WorkModel>(null as any);
    }

    /**
     * @return OK
     */
    linkFileToWork(code: string, fileCode: string): Promise<WorkModel> {
        let url_ = this.baseUrl + "/api/works/{code}/files/{fileCode}";
        if (code === undefined || code === null)
            throw new Error("The parameter 'code' must be defined.");
        url_ = url_.replace("{code}", encodeURIComponent("" + code));
        if (fileCode === undefined || fileCode === null)
            throw new Error("The parameter 'fileCode' must be defined.");
        url_ = url_.replace("{fileCode}", encodeURIComponent("" + fileCode));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processLinkFileToWork(_response));
        });
    }

    protected processLinkFileToWork(response: Response): Promise<WorkModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WorkModel.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorModel.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WorkModel>(null as any);
    }

    /**
     * @return OK
     */
    unlinkFileFromWork(code: string, fileCode: string): Promise<WorkModel> {
        let url_ = this.baseUrl + "/api/works/{code}/files/{fileCode}";
        if (code === undefined || code === null)
            throw new Error("The parameter 'code' must be defined.");
        url_ = url_.replace("{code}", encodeURIComponent("" + code));
        if (fileCode === undefined || fileCode === null)
            throw new Error("The parameter 'fileCode' must be defined.");
        url_ = url_.replace("{fileCode}", encodeURIComponent("" + fileCode));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processUnlinkFileFromWork(_response));
        });
    }

    protected processUnlinkFileFromWork(response: Response): Promise<WorkModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WorkModel.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorModel.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WorkModel>(null as any);
    }
}

export class AuthorCreateModel implements IAuthorCreateModel {
    code?: string | undefined;

    constructor(data?: IAuthorCreateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): AuthorCreateModel {
        data = typeof data === 'object' ? data : {};
        let result = new AuthorCreateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        return data;
    }
}

export interface IAuthorCreateModel {
    code?: string | undefined;
}

export class AuthorInfoModel implements IAuthorInfoModel {
    language?: string | undefined;
    fullName?: string | undefined;
    description?: string | undefined;

    constructor(data?: IAuthorInfoModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.language = _data["language"];
            this.fullName = _data["fullName"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): AuthorInfoModel {
        data = typeof data === 'object' ? data : {};
        let result = new AuthorInfoModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["language"] = this.language;
        data["fullName"] = this.fullName;
        data["description"] = this.description;
        return data;
    }
}

export interface IAuthorInfoModel {
    language?: string | undefined;
    fullName?: string | undefined;
    description?: string | undefined;
}

export class AuthorInfoUpdateModel implements IAuthorInfoUpdateModel {
    fullName?: string | undefined;
    description?: string | undefined;

    constructor(data?: IAuthorInfoUpdateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fullName = _data["fullName"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): AuthorInfoUpdateModel {
        data = typeof data === 'object' ? data : {};
        let result = new AuthorInfoUpdateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fullName"] = this.fullName;
        data["description"] = this.description;
        return data;
    }
}

export interface IAuthorInfoUpdateModel {
    fullName?: string | undefined;
    description?: string | undefined;
}

export class AuthorLifetimeUpdateModel implements IAuthorLifetimeUpdateModel {
    born?: string | undefined;
    died?: string | undefined;

    constructor(data?: IAuthorLifetimeUpdateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.born = _data["born"];
            this.died = _data["died"];
        }
    }

    static fromJS(data: any): AuthorLifetimeUpdateModel {
        data = typeof data === 'object' ? data : {};
        let result = new AuthorLifetimeUpdateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["born"] = this.born;
        data["died"] = this.died;
        return data;
    }
}

export interface IAuthorLifetimeUpdateModel {
    born?: string | undefined;
    died?: string | undefined;
}

export class AuthorModel implements IAuthorModel {
    code?: string | undefined;
    born?: string | undefined;
    died?: string | undefined;
    infos?: AuthorInfoModel[] | undefined;

    constructor(data?: IAuthorModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.born = _data["born"];
            this.died = _data["died"];
            if (Array.isArray(_data["infos"])) {
                this.infos = [] as any;
                for (let item of _data["infos"])
                    this.infos!.push(AuthorInfoModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AuthorModel {
        data = typeof data === 'object' ? data : {};
        let result = new AuthorModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["born"] = this.born;
        data["died"] = this.died;
        if (Array.isArray(this.infos)) {
            data["infos"] = [];
            for (let item of this.infos)
                data["infos"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAuthorModel {
    code?: string | undefined;
    born?: string | undefined;
    died?: string | undefined;
    infos?: AuthorInfoModel[] | undefined;
}

export enum ErrorCode {
    LoginFailed = "login-failed",
    InvalidArgument = "invalid-argument",
    NotFound = "not-found",
}

export class ErrorModel implements IErrorModel {
    code?: ErrorCode;
    message?: string | undefined;

    constructor(data?: IErrorModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): ErrorModel {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["message"] = this.message;
        return data;
    }
}

export interface IErrorModel {
    code?: ErrorCode;
    message?: string | undefined;
}

export class FileModel implements IFileModel {
    code?: string | undefined;
    format?: string | undefined;
    size?: number;
    links?: LinkModel[] | undefined;

    constructor(data?: IFileModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.format = _data["format"];
            this.size = _data["size"];
            if (Array.isArray(_data["links"])) {
                this.links = [] as any;
                for (let item of _data["links"])
                    this.links!.push(LinkModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FileModel {
        data = typeof data === 'object' ? data : {};
        let result = new FileModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["format"] = this.format;
        data["size"] = this.size;
        if (Array.isArray(this.links)) {
            data["links"] = [];
            for (let item of this.links)
                data["links"].push(item.toJSON());
        }
        return data;
    }
}

export interface IFileModel {
    code?: string | undefined;
    format?: string | undefined;
    size?: number;
    links?: LinkModel[] | undefined;
}

export class FileStorageFileModel implements IFileStorageFileModel {
    fileId?: string | undefined;
    name?: string | undefined;
    size?: number;
    updated?: Date | undefined;

    constructor(data?: IFileStorageFileModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fileId = _data["fileId"];
            this.name = _data["name"];
            this.size = _data["size"];
            this.updated = _data["updated"] ? new Date(_data["updated"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): FileStorageFileModel {
        data = typeof data === 'object' ? data : {};
        let result = new FileStorageFileModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileId"] = this.fileId;
        data["name"] = this.name;
        data["size"] = this.size;
        data["updated"] = this.updated ? this.updated.toISOString() : <any>undefined;
        return data;
    }
}

export interface IFileStorageFileModel {
    fileId?: string | undefined;
    name?: string | undefined;
    size?: number;
    updated?: Date | undefined;
}

export class FileStorageLinkModel implements IFileStorageLinkModel {
    fileId?: string | undefined;

    constructor(data?: IFileStorageLinkModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fileId = _data["fileId"];
        }
    }

    static fromJS(data: any): FileStorageLinkModel {
        data = typeof data === 'object' ? data : {};
        let result = new FileStorageLinkModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileId"] = this.fileId;
        return data;
    }
}

export interface IFileStorageLinkModel {
    fileId?: string | undefined;
}

export class FileStorageModel implements IFileStorageModel {
    code?: string | undefined;
    name?: string | undefined;

    constructor(data?: IFileStorageModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): FileStorageModel {
        data = typeof data === 'object' ? data : {};
        let result = new FileStorageModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["name"] = this.name;
        return data;
    }
}

export interface IFileStorageModel {
    code?: string | undefined;
    name?: string | undefined;
}

export class JsonNode implements IJsonNode {
    options?: JsonNodeOptions;
    parent?: JsonNode;
    root?: JsonNode;

    constructor(data?: IJsonNode) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.options = _data["options"] ? JsonNodeOptions.fromJS(_data["options"]) : <any>undefined;
            this.parent = _data["parent"] ? JsonNode.fromJS(_data["parent"]) : <any>undefined;
            this.root = _data["root"] ? JsonNode.fromJS(_data["root"]) : <any>undefined;
        }
    }

    static fromJS(data: any): JsonNode {
        data = typeof data === 'object' ? data : {};
        let result = new JsonNode();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["options"] = this.options ? this.options.toJSON() : <any>undefined;
        data["parent"] = this.parent ? this.parent.toJSON() : <any>undefined;
        data["root"] = this.root ? this.root.toJSON() : <any>undefined;
        return data;
    }
}

export interface IJsonNode {
    options?: JsonNodeOptions;
    parent?: JsonNode;
    root?: JsonNode;
}

export class JsonNodeOptions implements IJsonNodeOptions {
    propertyNameCaseInsensitive?: boolean;

    constructor(data?: IJsonNodeOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.propertyNameCaseInsensitive = _data["propertyNameCaseInsensitive"];
        }
    }

    static fromJS(data: any): JsonNodeOptions {
        data = typeof data === 'object' ? data : {};
        let result = new JsonNodeOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["propertyNameCaseInsensitive"] = this.propertyNameCaseInsensitive;
        return data;
    }
}

export interface IJsonNodeOptions {
    propertyNameCaseInsensitive?: boolean;
}

export class JsonValue implements IJsonValue {
    options?: JsonNodeOptions;
    parent?: JsonNode;
    root?: JsonNode;

    constructor(data?: IJsonValue) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.options = _data["options"] ? JsonNodeOptions.fromJS(_data["options"]) : <any>undefined;
            this.parent = _data["parent"] ? JsonNode.fromJS(_data["parent"]) : <any>undefined;
            this.root = _data["root"] ? JsonNode.fromJS(_data["root"]) : <any>undefined;
        }
    }

    static fromJS(data: any): JsonValue {
        data = typeof data === 'object' ? data : {};
        let result = new JsonValue();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["options"] = this.options ? this.options.toJSON() : <any>undefined;
        data["parent"] = this.parent ? this.parent.toJSON() : <any>undefined;
        data["root"] = this.root ? this.root.toJSON() : <any>undefined;
        return data;
    }
}

export interface IJsonValue {
    options?: JsonNodeOptions;
    parent?: JsonNode;
    root?: JsonNode;
}

export class LanguageModel implements ILanguageModel {
    code?: string | undefined;
    name?: string | undefined;

    constructor(data?: ILanguageModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): LanguageModel {
        data = typeof data === 'object' ? data : {};
        let result = new LanguageModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["name"] = this.name;
        return data;
    }
}

export interface ILanguageModel {
    code?: string | undefined;
    name?: string | undefined;
}

export class LinkModel implements ILinkModel {
    storageCode?: string | undefined;
    fileId?: string | undefined;

    constructor(data?: ILinkModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.storageCode = _data["storageCode"];
            this.fileId = _data["fileId"];
        }
    }

    static fromJS(data: any): LinkModel {
        data = typeof data === 'object' ? data : {};
        let result = new LinkModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["storageCode"] = this.storageCode;
        data["fileId"] = this.fileId;
        return data;
    }
}

export interface ILinkModel {
    storageCode?: string | undefined;
    fileId?: string | undefined;
}

export class LoginModel implements ILoginModel {
    username?: string | undefined;
    password?: string | undefined;

    constructor(data?: ILoginModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginModel {
        data = typeof data === 'object' ? data : {};
        let result = new LoginModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["password"] = this.password;
        return data;
    }
}

export interface ILoginModel {
    username?: string | undefined;
    password?: string | undefined;
}

export class LoginSuccessModel implements ILoginSuccessModel {
    token?: string | undefined;

    constructor(data?: ILoginSuccessModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.token = _data["token"];
        }
    }

    static fromJS(data: any): LoginSuccessModel {
        data = typeof data === 'object' ? data : {};
        let result = new LoginSuccessModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        return data;
    }
}

export interface ILoginSuccessModel {
    token?: string | undefined;
}

export class MigrationModel implements IMigrationModel {
    id?: string | undefined;
    migrator?: string | undefined;
    source?: string | undefined;
    destination?: string | undefined;
    status?: string | undefined;
    createdAt?: Date;
    startedAt?: Date | undefined;
    completedAt?: Date | undefined;
    result?: string | undefined;
    error?: string | undefined;
    stats?: StatsModel;

    constructor(data?: IMigrationModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.migrator = _data["migrator"];
            this.source = _data["source"];
            this.destination = _data["destination"];
            this.status = _data["status"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.startedAt = _data["startedAt"] ? new Date(_data["startedAt"].toString()) : <any>undefined;
            this.completedAt = _data["completedAt"] ? new Date(_data["completedAt"].toString()) : <any>undefined;
            this.result = _data["result"];
            this.error = _data["error"];
            this.stats = _data["stats"] ? StatsModel.fromJS(_data["stats"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MigrationModel {
        data = typeof data === 'object' ? data : {};
        let result = new MigrationModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["migrator"] = this.migrator;
        data["source"] = this.source;
        data["destination"] = this.destination;
        data["status"] = this.status;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["startedAt"] = this.startedAt ? this.startedAt.toISOString() : <any>undefined;
        data["completedAt"] = this.completedAt ? this.completedAt.toISOString() : <any>undefined;
        data["result"] = this.result;
        data["error"] = this.error;
        data["stats"] = this.stats ? this.stats.toJSON() : <any>undefined;
        return data;
    }
}

export interface IMigrationModel {
    id?: string | undefined;
    migrator?: string | undefined;
    source?: string | undefined;
    destination?: string | undefined;
    status?: string | undefined;
    createdAt?: Date;
    startedAt?: Date | undefined;
    completedAt?: Date | undefined;
    result?: string | undefined;
    error?: string | undefined;
    stats?: StatsModel;
}

export class MigrationTaskModel implements IMigrationTaskModel {
    migrator?: string | undefined;
    source?: string | undefined;
    destination?: string | undefined;

    constructor(data?: IMigrationTaskModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.migrator = _data["migrator"];
            this.source = _data["source"];
            this.destination = _data["destination"];
        }
    }

    static fromJS(data: any): MigrationTaskModel {
        data = typeof data === 'object' ? data : {};
        let result = new MigrationTaskModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["migrator"] = this.migrator;
        data["source"] = this.source;
        data["destination"] = this.destination;
        return data;
    }
}

export interface IMigrationTaskModel {
    migrator?: string | undefined;
    source?: string | undefined;
    destination?: string | undefined;
}

export class MigratorModel implements IMigratorModel {
    name?: string | undefined;
    sources?: string[] | undefined;
    destinations?: string[] | undefined;

    constructor(data?: IMigratorModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            if (Array.isArray(_data["sources"])) {
                this.sources = [] as any;
                for (let item of _data["sources"])
                    this.sources!.push(item);
            }
            if (Array.isArray(_data["destinations"])) {
                this.destinations = [] as any;
                for (let item of _data["destinations"])
                    this.destinations!.push(item);
            }
        }
    }

    static fromJS(data: any): MigratorModel {
        data = typeof data === 'object' ? data : {};
        let result = new MigratorModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (Array.isArray(this.sources)) {
            data["sources"] = [];
            for (let item of this.sources)
                data["sources"].push(item);
        }
        if (Array.isArray(this.destinations)) {
            data["destinations"] = [];
            for (let item of this.destinations)
                data["destinations"].push(item);
        }
        return data;
    }
}

export interface IMigratorModel {
    name?: string | undefined;
    sources?: string[] | undefined;
    destinations?: string[] | undefined;
}

export class OkModel implements IOkModel {
    time?: Date;
    version?: string | undefined;

    constructor(data?: IOkModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.time = _data["time"] ? new Date(_data["time"].toString()) : <any>undefined;
            this.version = _data["version"];
        }
    }

    static fromJS(data: any): OkModel {
        data = typeof data === 'object' ? data : {};
        let result = new OkModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["time"] = this.time ? this.time.toISOString() : <any>undefined;
        data["version"] = this.version;
        return data;
    }
}

export interface IOkModel {
    time?: Date;
    version?: string | undefined;
}

export class StatsModel implements IStatsModel {
    created?: number;
    updated?: number;
    skipped?: number;
    failed?: number;

    constructor(data?: IStatsModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.created = _data["created"];
            this.updated = _data["updated"];
            this.skipped = _data["skipped"];
            this.failed = _data["failed"];
        }
    }

    static fromJS(data: any): StatsModel {
        data = typeof data === 'object' ? data : {};
        let result = new StatsModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["created"] = this.created;
        data["updated"] = this.updated;
        data["skipped"] = this.skipped;
        data["failed"] = this.failed;
        return data;
    }
}

export interface IStatsModel {
    created?: number;
    updated?: number;
    skipped?: number;
    failed?: number;
}

export class UserModel implements IUserModel {
    name?: string | undefined;
    roles?: string[] | undefined;

    constructor(data?: IUserModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(item);
            }
        }
    }

    static fromJS(data: any): UserModel {
        data = typeof data === 'object' ? data : {};
        let result = new UserModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        return data;
    }
}

export interface IUserModel {
    name?: string | undefined;
    roles?: string[] | undefined;
}

export class WorkCreateModel implements IWorkCreateModel {
    code?: string | undefined;

    constructor(data?: IWorkCreateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): WorkCreateModel {
        data = typeof data === 'object' ? data : {};
        let result = new WorkCreateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        return data;
    }
}

export interface IWorkCreateModel {
    code?: string | undefined;
}

export class WorkInfoModel implements IWorkInfoModel {
    language?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;

    constructor(data?: IWorkInfoModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.language = _data["language"];
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): WorkInfoModel {
        data = typeof data === 'object' ? data : {};
        let result = new WorkInfoModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["language"] = this.language;
        data["name"] = this.name;
        data["description"] = this.description;
        return data;
    }
}

export interface IWorkInfoModel {
    language?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;
}

export class WorkInfoUpdateModel implements IWorkInfoUpdateModel {
    name?: string | undefined;
    description?: string | undefined;

    constructor(data?: IWorkInfoUpdateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): WorkInfoUpdateModel {
        data = typeof data === 'object' ? data : {};
        let result = new WorkInfoUpdateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        return data;
    }
}

export interface IWorkInfoUpdateModel {
    name?: string | undefined;
    description?: string | undefined;
}

export class WorkModel implements IWorkModel {
    code?: string | undefined;
    publish?: string | undefined;
    language?: string | undefined;
    infos?: WorkInfoModel[] | undefined;
    authorsCodes?: string[] | undefined;
    subWorksCodes?: string[] | undefined;
    filesCodes?: string[] | undefined;
    originalCode?: string | undefined;

    constructor(data?: IWorkModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.publish = _data["publish"];
            this.language = _data["language"];
            if (Array.isArray(_data["infos"])) {
                this.infos = [] as any;
                for (let item of _data["infos"])
                    this.infos!.push(WorkInfoModel.fromJS(item));
            }
            if (Array.isArray(_data["authorsCodes"])) {
                this.authorsCodes = [] as any;
                for (let item of _data["authorsCodes"])
                    this.authorsCodes!.push(item);
            }
            if (Array.isArray(_data["subWorksCodes"])) {
                this.subWorksCodes = [] as any;
                for (let item of _data["subWorksCodes"])
                    this.subWorksCodes!.push(item);
            }
            if (Array.isArray(_data["filesCodes"])) {
                this.filesCodes = [] as any;
                for (let item of _data["filesCodes"])
                    this.filesCodes!.push(item);
            }
            this.originalCode = _data["originalCode"];
        }
    }

    static fromJS(data: any): WorkModel {
        data = typeof data === 'object' ? data : {};
        let result = new WorkModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["publish"] = this.publish;
        data["language"] = this.language;
        if (Array.isArray(this.infos)) {
            data["infos"] = [];
            for (let item of this.infos)
                data["infos"].push(item.toJSON());
        }
        if (Array.isArray(this.authorsCodes)) {
            data["authorsCodes"] = [];
            for (let item of this.authorsCodes)
                data["authorsCodes"].push(item);
        }
        if (Array.isArray(this.subWorksCodes)) {
            data["subWorksCodes"] = [];
            for (let item of this.subWorksCodes)
                data["subWorksCodes"].push(item);
        }
        if (Array.isArray(this.filesCodes)) {
            data["filesCodes"] = [];
            for (let item of this.filesCodes)
                data["filesCodes"].push(item);
        }
        data["originalCode"] = this.originalCode;
        return data;
    }
}

export interface IWorkModel {
    code?: string | undefined;
    publish?: string | undefined;
    language?: string | undefined;
    infos?: WorkInfoModel[] | undefined;
    authorsCodes?: string[] | undefined;
    subWorksCodes?: string[] | undefined;
    filesCodes?: string[] | undefined;
    originalCode?: string | undefined;
}

export class WorkUpdateModel implements IWorkUpdateModel {
    date?: string | undefined;
    language?: string | undefined;

    constructor(data?: IWorkUpdateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            this.language = _data["language"];
        }
    }

    static fromJS(data: any): WorkUpdateModel {
        data = typeof data === 'object' ? data : {};
        let result = new WorkUpdateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        data["language"] = this.language;
        return data;
    }
}

export interface IWorkUpdateModel {
    date?: string | undefined;
    language?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}